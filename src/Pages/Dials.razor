@page "/dials"

@using models
@using wrangler.data
@using wrangler.handlers

@inject IJSRuntime _js
@inject CombatantHandler _combatant
@inject AffectHandler _affect
@inject MemoryBank _bank
@inject EncounterHandler _encounter

<div class="dials">
    <div class="box">
        <div class="control">
            <label class="label">add combatant</label>
            <input type="text" @bind="Combatant" @onkeyup="@(e => AddCombatant(e))" @ref="CombatantInput" />
        </div>
    </div>
    <div class="box">
        <div class="control">
            <label class="label">expiration round</label>
            <input Id="@_id" @onfocusin="@FocusInHandler" type="text" @bind="Submit.Expiration.Round"
                @ref="AffectStart" />
        </div>
        <div class="control">
            <label class="label">expiration turn</label>
            <select @bind="Submit.Expiration.Turn">
                <option value=""> </option>
                @foreach (var combatant in _bank.Combatants)
                {
                    <option value="@combatant.Name">@combatant.Name</option>
                }
            </select>
        </div>
        <div class="control">
            <label class="label">expire at start?</label>
            <input @bind="Submit.Expiration.AtStart" type="checkbox" />
        </div>        
        <div class="control">
            <label class="label">concentration?</label>
            <input @bind="Submit.IsConcentration" type="checkbox" name="concentration" />
        </div>
        <div class="control">
            <label class="label">description</label>
            <input type="text" @bind="Submit.Description" @onkeyup="@(e => AddAffect(e))" @ref="CreateAffect" />
        </div>        
    </div>
    <div class="box">
        <div class="control">
            <label>active icon</label>
            <div class="icons">
                @foreach(var icon in resources.Icons.List)
                {
                    <div>
                        <input type="radio" name="icon" 
                            checked="@(_bank.InactiveReason == icon)" 
                            @onchange="@(()=>OnIconChange(icon))" />
                        <img src=@($"css/{icon}.svg") />
                    </div>                    
                }
            </div>
        </div>
    </div>
    <div class="box">
        <InputFile OnChange="@LoadFiles" name="upload" id="upload" class="upload" />
        <label for="upload">upload encounters</label>
    </div>
</div>

@code {
    Affect Submit = new Affect();
    string Combatant = string.Empty;

    void OnIconChange(string icon)
    {
        _bank.InactiveReason = icon;
    }

    private ElementReference CombatantInput;
    private ElementReference CreateAffect;
    private ElementReference AffectStart;
    private string _id = "abc";

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        await _encounter.UploadEncounters(e.File);
    }

    async Task FocusInHandler(FocusEventArgs e)
    {
        await _js.InvokeVoidAsync("selectText", _id);
    }

    public void AddCombatant(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            _combatant.AddCombatant(Combatant);
            Combatant = string.Empty;
        }
    }

    private void AddAffect(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            _affect.AddAffect(Submit);
            Submit = new Affect();
            Submit.Expiration.Round = _bank.Combat.Round;
            AffectStart.FocusAsync();
        }
    }
}
