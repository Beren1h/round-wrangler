@page "/widget"

@using events
@using models
@using handlers
@using data

@inject CombatHandler _combat
@inject CombatantHandler _combatant
@inject AffectHandler _affect
@inject TensionHandler _tension
@inject MemoryBank _bank

@* @($"Tension {_bank.TensionDie}") *@
@* css/fled.svg *@
<div class="widget @Theme">
    <div class="widget-body" @onclick="() => InvokeClick(0)">
        @Text
        @if(IsCombatantReference)
        {
            var combatant = (Combatant)Reference;
            <object data=@($"css/{combatant.InactiveReason}.svg") width="25" height="25" />
        }
    </div>
    <div class="nest">
        @if(IsCombatantReference)
        {
            var combatant = (Combatant)Reference;
            @foreach(var affect in combatant.Affects)
            {
                <Widget 
                    Text="@affect.Description"
                    DisplayOnly=DisplayOnly
                    Reference=@("affect")
                    RemoveClick="()=>_combatant.RemoveAffectWidget(combatant, affect)"
                />
            }
        }
    </div>
    @if(!DisplayOnly)
    {
        <div class="widget-remove" @onclick="() => InvokeClick(1)">
            <div class="remove-x @Theme">x</div>
        </div>
    }
</div>

@code {

    private string Theme { get; set; } = "dark";

    [Parameter] public dynamic Reference { get; set; }
    [Parameter] public Action BodyClick { get; set; }
    [Parameter] public Action RemoveClick { get; set; }
    [Parameter] public string Text { get; set; }
    [Parameter] public string Override { get; set; }
    [Parameter] public bool DisplayOnly { get; set; }
    private bool IsCombatantReference { get; set; }

    protected override void OnInitialized()
    {
        if (Reference == null)
        {
            return;
        }

        if(Reference.GetType() == typeof(string))
        {
            var value = (string)Reference;
            
            switch(value)
            {
                case "tension":
                    if (!DisplayOnly)
                    {
                        _tension.OnTensionChanged += UpdateTension;
                    }
                    Theme = "round";
                    break;
                case "round":
                    Theme = "round";
                    break;
                case "red":
                    Theme = "red";
                    break;
                case "affect":
                    Theme = "affect";
                    break;
                case "assignment":
                    Theme = "assignment";
                    break;                    
                default:
                    Theme = "dark";
                    break;
            }
        }

        if (Reference.GetType() == typeof(wrangler.models.Combatant))
        {
            _combatant.OnCombatantChanged += UpdateCombatantTheme;
            _combat.OnCombatantChanged += UpdateCombatantTheme;
            _affect.OnCombatantChanged += UpdateCombatantTheme;
            IsCombatantReference = true;
        }

        if (Reference.GetType() == typeof(wrangler.models.Affect))
        {
            _affect.OnAssignmentAffectChanged += UpdateAffectTheme;
            Theme = "affect";
        }
    }

    private void UpdateTension(object sender, TensionChangedEventArgs e)
    {
        Text = $"Tension {e.Tension}";
    }

    private void UpdateAffectTheme(object sender, AssignmentAffectChangedEventArgs e)
    {
        var affect = (Affect)Reference;
        
        Theme = "affect";
        
        if (e.Affect == affect)
        {
            Theme = "red";
        }
    }

    private void UpdateCombatantTheme(object sender, CombatantChangedEventArgs e)
    {
        var combatant = (Combatant)Reference;
        
        Theme = "dark";

        if (!combatant.IsActive)
        {
            Theme = "dark muted dead";
        }

        if (combatant.IsActive && combatant.TurnTaken)
        {
            Theme = "dark muted";
        }

        if (combatant.IsActive && combatant.IsTurn)
        {
            Theme = "turn";
        }

        if (combatant.IsConcentrating)
        {
            Theme = Theme += " concentration";
        }

    }

    private void InvokeClick(int id)
    {
        switch (id)
        {
            case 1:
                RemoveClick?.Invoke();
            break;
            default:
                BodyClick?.Invoke();
            break;
        }
    }
}
